services:

  mqttbroker:
    container_name: mqttbroker
    image: eclipse-mosquitto:1.6.15
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
    labels:
      - "SERVICE_NAME=mqttbroker"
    networks:
      cloudsync-net:
        aliases:
          - mqttbroker.service

  redis:
    container_name: redis
    image: redis:6.2.4
    ports:
      - "6379:6379"
    labels:
      - "SERVICE_NAME=redis"
    networks:
      cloudsync-net:
        aliases:
          - redis.service

  wallclockservice:
    container_name: wallclock-service
    build: 
      context: ./wallclock-service/
      dockerfile: wallclock-service/Dockerfile
    image: bbcrd-wallclockservice
    ports:
      - "6677:6677/udp"
      - "6676:6676"
      - "6675:80"
    labels:
      - "SERVICE_NAME=wallclock-service"
    networks:
      cloudsync-net:
        aliases:
          - wallclock-service.service

  sessioncontroller:
    container_name: sessioncontroller
    build:
      context: ./src
      dockerfile: sessioncontroller/Dockerfile
    image: bbcrd-cloudsync-sessioncontroller
    ports:
      - 4002:4002
    command: npm start
    volumes:
      - ./src/sessioncontroller/src:/usr/src/sessioncontroller/src
      - ./src/sessioncontroller/log:/usr/src/sessioncontroller/log
    depends_on:
      - mqttbroker
      - wallclockservice
    labels:
      - "SERVICE_NAME=sessioncontroller"
    environment:
      WALLCLOCK_SERVICE_WS_URL:  ${WALLCLOCK_SERVICE_WS_URL}
      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
    networks:
      cloudsync-net:
        aliases:
          - sessioncontroller.service

  synccontroller:
    build:
      context: ./src
      dockerfile: synccontroller/Dockerfile
    image: bbcrd-cloudsync-synccontroller
    ports:
      - 3002:3002
    command: npm start
    volumes:
      - ./src/synccontroller/src:/usr/src/synccontroller/src
      - ./src/synccontroller/log:/usr/src/synccontroller/log
    depends_on:
      - mqttbroker
      - redis
      - wallclockservice
    labels:
      - "SERVICE_NAME=synccontroller"
    environment:
      WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}
      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
    networks:
      cloudsync-net:
        aliases:
          - synccontroller.service

  statscontroller:
    container_name: statscontroller
    build:
      context: ./src
      dockerfile: statscontroller/Dockerfile
    image: bbcrd-cloudsync-statscontroller
    ports:
      - 4001:4001
      - 5855:5855
    command: npm start
    volumes:
      - ./src/statscontroller/src:/usr/src/statscontroller/src
      - ./src/statscontroller/log:/usr/src/statscontroller/log
    depends_on:
      - mqttbroker
      - redis
      - wallclockservice
    labels:
      - "SERVICE_NAME=statscontroller"
    environment:
        WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}
        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
        STATS_WRITE_INTERVAL_SECS: ${STATS_WRITE_INTERVAL_SECS}
        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
        INFLUX_URL: "${INFLUX_URL}"
        INFLUX_TOKEN: "${INFLUX_TOKEN}"

    networks:
      cloudsync-net:
        aliases:
          - statscontroller.service

  timelineobserver:
    container_name: timelineobserver
    build: src/timelineobserver/TimelineObserver/
    image: bbcrd-cloudsync-timelineobserver 
    command: -d redis -b mqttbroker -t Sessions/+/timelines/+/state
    depends_on:
      - mqttbroker
      - redis
      - synccontroller
    labels:
      - "SERVICE_NAME=timelineobserver"
    environment:
        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}
        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}
    networks:
      cloudsync-net:
        aliases:
          - timelineobserver.service

  synchronisedvideo:
    container_name: synchronisedvideo
    build: examples/synchronisedvideo
    image: bbcrd-cloudsync-syncvideo
    volumes:
      - ./examples/synchronisedvideo/src:/usr/src/app/src
      - ./examples/synchronisedvideo/logs:/usr/src/app/logs
      - ./examples/synchronisedvideo/media:/usr/src/app/media
      - ./examples/synchronisedvideo/config:/usr/src/app/config
      - ./dist:/usr/src/app/dist
    ports:
      - 3000:3000
    depends_on:
      - sessioncontroller
    labels:
      - "SERVICE_NAME=synchronisedvideo"
    networks:
      cloudsync-net:
        aliases:
          - synchronisedvideo.service

networks:
  cloudsync-net:
     driver: bridge

